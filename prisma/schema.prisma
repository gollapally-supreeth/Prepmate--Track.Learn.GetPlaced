// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  name       String?
  google_id  String?  @unique
  avatar_url String?
  password   String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  profile    Profile?
  chatSessions ChatSession[]
}
model Profile {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique

  // Basic Info
  fullName      String?
  username      String?
  contact       String?
  dob           DateTime?
  status        String?
  avatarUrl     String?

  // Bio
  bio           String?

  // Social Links
  linkedin      String?
  github        String?
  twitter       String?
  website       String?

  // Academics (array of objects)
  educations    Json?

  // Skills (array of objects)
  skills        Json?

  // Projects (array of objects)
  projects      Json?

  // Experience (array of objects)
  experience    Json?

  // Add more fields as needed for badges, events, etc.
  badges        Json?
  events        Json?
  learningPath  Json?
  progress      Json?
  settings      Json?
  activityFeed  Json?
  quickActions  Json?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model ChatSession {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  title     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
}

model Message {
  id             String      @id @default(uuid())
  chatSession    ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
  chatSessionId  String
  sender         String      // 'user' or 'assistant'
  content        String
  timestamp      DateTime    @default(now())
  feedback       String?     // 'positive', 'negative', or null
}
